#! /usr/bin/ruby

require 'getoptlong'
require 'set'
require 'digest/sha1'

IDENTIFICATION = 'emptor 0.1'
USAGE = <<"EOF"
emptor -- create empty files specified in a BitTorrent file

usage: emptor filename.torrent

 --help             show this usage
 --version          show version data

EOF

#### Bdecoding

# Parse a bencoded string and return the object represented by it.
def bdecode source
    object, end_offset = bdecode_part source, 0
    raise 'bdecode error' unless end_offset == source.length
    return object
end

# Given a bencoded string and offset in it, parse the object starting at that
# offset.  Return the parsed object and offset in the source string immediately
# past the object's end.
def bdecode_part source, offset
    case source[offset]

    when ?0 .. ?9 then # string
        length = 0
        while (?0 .. ?9).include? source[offset] do
            length = length * 10 + source[offset] - ?0
            offset += 1
        end
        raise 'bdecode error' unless source[offset] == ?:
        offset += 1
        content = source[offset ... offset + length]
        raise 'bdecode error' unless content.length == length
        return content, offset + length

    when ?d then # dictionary
        dictionary = {}
        last_key = nil # we use this to check strictly ascending key order
        offset += 1
        until source[offset] == ?e do
            key, offset = bdecode_part source, offset
            raise 'bdecode error' unless key.is_a? String
            raise 'bdecode error' if last_key and !(key > last_key)
            value, offset = bdecode_part source, offset
            dictionary[key] = value
            last_key = key
        end
        offset += 1
        return dictionary, offset

    when ?l then # list
        list = []
        offset += 1
        until source[offset] == ?e do
            item, offset = bdecode_part source, offset
            list.push item
        end
        offset += 1
        return list, offset

    when ?i then # integer
        offset += 1
        end_offset = source.index(?e, offset)
        raise 'bdecode error' if end_offset.nil?
        integer_face = source[offset ... end_offset]
        # Going by the foundational principle that there's only one way to
        # properly bencode an object, it's obvious that plus signs and extra
        # lead zeroes are verboten in bencoded integers.
        raise 'bdecode error' unless integer_face =~ /\A(0|-?[1-9]\d*)\Z/
        value = integer_face.to_i
        offset = end_offset + 1
        return value, offset

    else
        raise "Unknown bdecode object marker #{source[offset].chr.inspect}"

    end
end

#### Deep freeze

class String
    def deep_freeze
        freeze
        return self
    end
end

class Array
    def deep_freeze
        each do |item|
            item.deep_freeze
        end
        freeze
        return self
    end
end

class Integer
    def deep_freeze
        return self
    end
end

class Hash
    def deep_freeze
        each_pair do |key, value|
            key.deep_freeze
            value.deep_freeze
        end
        freeze
        return self
    end
end

#### Encapsulated torrent object

class Torrent
    # the parsed torrent data structure; frozen
    attr_reader :data

    # the info dictionary
    attr_reader :info

    # the piece data; a string
    attr_reader :pieces
   
    # piece length; an integer
    attr_reader :piece_length

    # file data; nil or a list of dictionaries
    attr_reader :files

    # root object name; a string
    attr_reader :name

    # total length of data in this torrent; a non-negative integer
    attr_reader :length

    # number of pieces; a non-negative integer
    attr_reader :piece_count

    def initialize bencoded_data
        super()
        @data = bdecode bencoded_data
        @data.deep_freeze

        # validate and extract some data
        @info = @data['info']
        unless @info.is_a? Hash then
            raise Invalid::new(".info is not a dictionary")
        end

        @pieces = @info['pieces']
        unless @pieces.is_a? String then
            raise Invalid::new(".info.pieces is not a string")
        end

        @piece_length = @info['piece length']
        unless @piece_length.is_a? Integer then
            raise Invalid::new(".info.'piece length' is not an integer")
        end
        unless @piece_length > 0 then
            raise Invalid::new(".info.'piece length' is not a positive integer")
        end

        @files = @info['files']
        if @files then
            unless @files.is_a? Array then
                raise Invalid::new(".info.files exists but is not a list")
            end

            @length = 0
            @files.each_with_index do |file_item, i|
                unless file_item['path'].is_a? Array then
                    raise Invalid::new(".info.files[#{i}].path is not a list")
                end
                unless file_item['path'].all?{|c| valid_filename_component? c} then
                    raise Invalid::new(".info.files[#{i}].path is not a list of valid filename components")
                end

                validate_length file_item['length'], ".info.files[#{i}].length"
                @length += file_item['length']
            end
            unless @info['length'].nil? then
                raise Invalid::new(".info.files exists but .info.length exists, too")
            end
        else
            validate_length @info['length'], ".info.length"
            @length = @info['length']
        end

        @name = @info['name']
        unless @name.is_a? String then
            raise Invalid::new(".info.name is not a string")
        end
        unless valid_filename_component? @name then
            raise Invalid::new(".info.name is not a valid unqualified single-level filename")
        end

        @piece_count = (@length + @piece_length - 1) / @piece_length # integer division
        unless @pieces.length == @piece_count * 20 then
            raise Invalid::new("total data size (#@piece_count pieces of #@piece_length bytes each) does not match the length of .info.pieces (#{@pieces.length})")
        end

        return
    end

    def validate_length value, address
        unless value.is_a? Integer then
            raise Invalid::new("#{address} is not an integer")
        end
        unless value >= 0 then
            raise Invalid::new("#{address} is not a non-negative integer")
        end
        return
    end
    private :validate_length

    def valid_filename_component? s
        return s.is_a?(String) && !s.include?(?/) && !['.', '..'].include?(s)
    end
    private :valid_filename_component?

    def multifile?
        return !@files.nil?
    end

    # Get hash of the specified piece as a hex string.
    def piece_hash piece_index
        hash, = @pieces[piece_index * 20 ... (piece_index + 1) * 20].unpack 'H*'
        return hash
    end

    class Invalid < Exception
        def initialize message
            super message
            return
        end
    end
end

#### Parse command line

$0 = 'emptor' # set our name for GetoptLong's error reporting

begin
    GetoptLong::new(
        ['--help', '-h', GetoptLong::NO_ARGUMENT],
        ['--version', '-V', GetoptLong::NO_ARGUMENT]
    ).each do |opt, arg|
        case opt
        when '--help' then
            puts USAGE
            exit 0
        when '--version' then
            puts IDENTIFICATION
            exit 0
        end
    end
rescue GetoptLong::InvalidOption, GetoptLong::MissingArgument
    # the error has already been reported by GetoptLong#each
    exit 1
end

unless ARGV.length == 1 then
    $stderr.puts "emptor: argument count mismatch"
    exit 1
end

$torrent_filename = ARGV[0]

#### The work begins here

torrent = nil # declare
begin
    torrent = Torrent::new IO::read($torrent_filename)
rescue Torrent::Invalid
    $stderr.puts "emptor: #$torrent_filename: #$!"
    exit 1
end

errors_detected = false # so far, no errors or we would have exited already

if torrent.multifile? then
    unless File::directory? torrent.name then
        $stderr.puts "emptor: #{torrent.name}: no such directory"
        exit 1
    end
end

class Torrent
    # Iterate over files and yield [filename, size] for each one.
    def each_filename_with_size
        unless multifile? then # single file
            # synthesise a file array of the single file
            file_list = [{'path' => [@name], 'length' => @length}]
            file_list.deep_freeze
        else # multiple files
            file_list = @files
        end

        file_list.each do |entry|
            yield File::join(*entry['path']), entry['length']
        end
        return
    end
end

empty_file_count = 0

torrent.each_filename_with_size do |filename, filesize|
    next unless filesize.zero?
    if torrent.multifile? then
        filename = File::join(torrent.name, filename)
    end
    unless File::exists? filename then
        slash_pos = -1
        while slash_pos = filename.index(?/, slash_pos + 1) do
            begin
                ancestor = filename[0 ... slash_pos]
                Dir::mkdir ancestor
                puts "created directory #{ancestor.inspect}"
            rescue Errno::EEXIST
                # ignore
            end
        end
        open filename, 'wb' do |port|
        end
        puts "created empty file #{filename.inspect}"
    end
    empty_file_count += 1
end
